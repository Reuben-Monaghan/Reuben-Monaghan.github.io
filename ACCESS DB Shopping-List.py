{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "e6f58342",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Microsoft Access Driver (*.mdb, *.accdb)']"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pyodbc\n",
    "import datetime\n",
    "import os\n",
    "global file_path \n",
    "file_path = 'C:\\\\Users\\\\Reuben\\\\Desktop\\\\Coding\\\\Shopping list\\\\'\n",
    "\n",
    "[i for i in pyodbc.drivers() if i.startswith('Microsoft Access Driver')]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "36394820",
   "metadata": {},
   "outputs": [],
   "source": [
    "conn_str = (r'DRIVER={Microsoft Access Driver (*.mdb, *.accdb)};'            \n",
    "            r'DBQ=C:\\Users\\Reuben\\Desktop\\Coding\\Shopping list\\Git_Shopping_List_Project\\Recipe-Database.accdb;')\n",
    "\n",
    "#r'DBQ=E:\\PythonInOffice\\python_connect_to_ms_access\\database.accdb;'\n",
    "conn = pyodbc.connect(conn_str)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "19e043ea",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<pyodbc.Connection at 0x22d5c2d7920>"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "conn"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "3bb62a8f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Ingredients\n",
      "Recipe-Ingredient\n",
      "Recipes\n",
      "Pull Recipe names and ingredient names\n",
      "Recipe_ingredients_Sum_Quantity\n",
      "Recipes Query\n"
     ]
    }
   ],
   "source": [
    "cursor = conn.cursor()\n",
    "for i in cursor.tables(tableType='TABLE'):\n",
    "    print(i.table_name)\n",
    "\n",
    "\n",
    "for i in cursor.tables(tableType='VIEW'):\n",
    "    print(i.table_name)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "ab4cb471",
   "metadata": {},
   "outputs": [],
   "source": [
    "class recipe:\n",
    "    \n",
    "    # instance attributes, takes recipe name the serving size of the recipe and the ingredients dictionary {ingredient:quantity}\n",
    "    \n",
    "    def __init__(self, name, servings, ingredients):\n",
    "        self.name = name\n",
    "        self.servings = servings        \n",
    "        self.ingredients = ingredients\n",
    "        \n",
    "        \n",
    "    \n",
    "    \n",
    "    def printname(self):\n",
    "        print(self.name)\n",
    "        \n",
    "    def add_recipe(self):\n",
    "        \n",
    "        sheet1,workbook = open_Recipes_xl()\n",
    "        \n",
    "        recipe_row = len(recipe_list())+1\n",
    "        \n",
    "        sheet1.cell(row=recipe_row, column=1).value = self.name\n",
    "        \n",
    "        sheet1.cell(row=recipe_row, column=2).value = int(self.servings)\n",
    "        \n",
    "        sheet1.cell(row=recipe_row, column=3).value = len(self.ingredients)\n",
    "        \n",
    "        for i in range(len(self.ingredients)):\n",
    "            \n",
    "    \n",
    "            sheet1.cell(row=recipe_row, column=((i*3)+4)).value = self.ingredients[i][0]\n",
    "            sheet1.cell(row=recipe_row, column=((i*3)+5)).value = self.ingredients[i][1]\n",
    "            sheet1.cell(row=recipe_row, column=((i*3)+6)).value = self.ingredients[i][2]\n",
    "        workbook.save('Recipes.xlsx')\n",
    "        \n",
    "        \n",
    "    def add_ingredients(self):\n",
    "\n",
    "        sheet1,workbook = open_Recipes_xl()\n",
    "\n",
    "        recipe_row = recipe_list().index(r.name) + 1\n",
    "        ingredient_range = get_ingredient_range(recipe_row)\n",
    "        new_ingredient_range = (ingredient_range[1]+1),(ingredient_range[1]+4)\n",
    "\n",
    "        while True:\n",
    "\n",
    "            ing  = pyip.inputStr(prompt='Enter ingredient name: ')\n",
    "            quant  = pyip.inputNum(prompt='Enter ingredient quantity: ')\n",
    "            measure  = pyip.inputStr(prompt='Enter ingredient measurement: ')\n",
    "            check = pyip.inputStr(prompt=f'{ing}-{quant}{measure}, is this correct? Y/N: ')\n",
    "\n",
    "            if check.upper() == 'Y':\n",
    "                break\n",
    "            else:\n",
    "                continue\n",
    "\n",
    "          # make a list of ing,quant,measure then add to new_ingredient_range.value in excel sheet.\n",
    "\n",
    "        add_list=[ing, quant, measure]\n",
    "\n",
    "        for i in range(new_ingredient_range[0],new_ingredient_range[1]):\n",
    "            sheet1.cell(row=recipe_row, column=i).value = add_list[i-new_ingredient_range[0]]\n",
    "\n",
    "        workbook.save('Recipes.xlsx')\n",
    "\n",
    "    def delete_ingredients(self):\n",
    "        sheet1,workbook = open_Recipes_xl()\n",
    "\n",
    "        # getting all the info needed\n",
    "        recipe_row = recipe_list().index(r.name) + 1\n",
    "        recipe_info = get_recipe_info(recipe_row)\n",
    "        ingredient_range = get_ingredient_range(recipe_row)\n",
    "\n",
    "        ingredient_names_list = recipe_info[-1][::3]\n",
    "        ingredient_list = recipe_info[-1]\n",
    "\n",
    "\n",
    "        for i in range(3):\n",
    "            print(f'ingredients in {r.name}: {ingredient_names_list}')\n",
    "            del_ing  = pyip.inputStr(prompt='Enter ingredient name to delete: ')\n",
    "\n",
    "            # going to need to add a way of keeping all strings uniform i.e. capitalise all ingredients\n",
    "\n",
    "            if del_ing in ingredient_names_list:\n",
    "                break\n",
    "            else:\n",
    "                print(f'{del_ing} is not in {r.name}')\n",
    "                continue\n",
    "\n",
    "\n",
    "        if del_ing in ingredient_names_list:\n",
    "            check = pyip.inputStr(prompt=f'are you sure you want to delete {del_ing} from {r.name} ingredients? Y/N: ')\n",
    "\n",
    "            #if yes, delete ingredients.\n",
    "            if check.upper() == 'Y':\n",
    "\n",
    "                #delete ingredient\n",
    "                columns_to_delete = (ingredient_list.index(del_ing)+4),(ingredient_list.index(del_ing)+7)        \n",
    "                DeleteCellsxl(recipe_row,columns_to_delete)\n",
    "\n",
    "                #reduce the number of ingredients by one.\n",
    "                sheet1.cell(row=recipe_row, column=3).value -=1     \n",
    "\n",
    "                #copy remaining igredients - find the last ingredient cell and the last cell of the deleted ingredient.\n",
    "                # all cells in that range should be move to the left by three (-3) then delete the excess cells\n",
    "\n",
    "                columns_to_copy = (columns_to_delete[1]),(len(ingredient_list)+4)\n",
    "                columns_to_paste = (columns_to_delete[0]),(columns_to_copy[1]-3)\n",
    "                CopyandPastexl(recipe_row,columns_to_copy,columns_to_paste)\n",
    "\n",
    "                #delete excess cells\n",
    "                columns_to_delete = (columns_to_paste[1]),(columns_to_copy[1])\n",
    "                DeleteCellsxl(recipe_row,columns_to_delete)\n",
    "\n",
    "\n",
    "                print(f'{del_ing}, deleted from: {r.name}')\n",
    "\n",
    "        else:\n",
    "            print('You did not select an existing ingredient to delete')\n",
    "\n",
    "        workbook.save('Recipes.xlsx')\n",
    "    # def edit_ingredients(self):\n",
    "    # def add_to_shopping_list(self):\n",
    "    \n",
    "    # get/display recipe info?\n",
    "    \n",
    "def Main_Menu():\n",
    "    # Tkinter Main menu\n",
    "    # This opens the main menu then calls functions by clicking buttons.\n",
    "\n",
    "    # Create a list to store the selected recipes\n",
    "\n",
    "    selected_recipes = []\n",
    "\n",
    "    #open excel file\n",
    "    #sheet1,workbook = open_Recipes_xl()\n",
    "\n",
    "    # Create the main window\n",
    "    menu_window = tk.Tk()\n",
    "\n",
    "    # Create the frame/format\n",
    "    frame = ttk.Frame(menu_window, padding=10)\n",
    "    frame.grid()\n",
    "\n",
    "    # Create a label for the title\n",
    "    ttk.Label(frame, text=\"Shopping List Menu\").grid(column=1, row=0)\n",
    "\n",
    "    # Create a button to add a Add Recipe \n",
    "    ttk.Button(frame, text=\"Add Recipe\", command=lambda:[add_recipe(menu_window)]).grid(column=0, row=1)\n",
    "\n",
    "    # Create a button to Edit Recipe\n",
    "    ttk.Button(frame, text=\"Edit Recipe\", command=menu_window.destroy).grid(column=0, row=2)\n",
    "\n",
    "    # Create a button to Delete Recipe\n",
    "    ttk.Button(frame, text=\"Delete Recipe\", command=lambda:[delete_recipes_button(menu_window)]).grid(column=0, row=3)\n",
    "\n",
    "    # Create a button to Create Shopping List\n",
    "    ttk.Button(frame, text=\"Create Shopping List\", command=lambda:[Create_Shopping_List(menu_window)]).grid(column=3, row=1)\n",
    "\n",
    "    # Create a button to quit\n",
    "    ttk.Button(frame, text=\"Quit\", command=menu_window.destroy).grid(column=1, row=4)\n",
    "\n",
    "    menu_window.mainloop()\n",
    "    \n",
    "    \n",
    "# def add_recipe(menu_window):\n",
    "#     #Called when the \"Add recipe\" button is clicked from the main menu\n",
    "    \n",
    "    \n",
    "#     global recipe_name\n",
    "#     recipe_name = ''\n",
    "#     global servings\n",
    "#     servings = ''\n",
    "#     global ingredients\n",
    "#     ingredients = []\n",
    "#     global ingredient_num\n",
    "#     ingredient_num = 0\n",
    "    \n",
    "#     global I\n",
    "#     global Q\n",
    "#     global M\n",
    "#     I = ''\n",
    "#     Q = ''\n",
    "#     M = ''\n",
    "    \n",
    "#     # Initialize the widget_y variable with the y position of the first set of widgets\n",
    "#     global widget_y\n",
    "#     widget_y = 100\n",
    "    \n",
    "#     # Close the menu window\n",
    "#     menu_window.destroy()\n",
    "    \n",
    "#     # Create add recipe window\n",
    "#     add_recipe_window = tk.Tk()\n",
    "    \n",
    "#      # Create the frame to hold the canvas and the scrollbar\n",
    "#     frame = tk.Frame(add_recipe_window)\n",
    "#     frame.pack()\n",
    "\n",
    "    \n",
    "#     # Create the canvas widget and the scrollbar\n",
    "#     canvas = tk.Canvas(add_recipe_window, height = 800, width = 770 )\n",
    "#     canvas.pack(side = \"left\")\n",
    "#     scrollbar = ttk.Scrollbar(add_recipe_window, orient=\"vertical\", command=canvas.yview)\n",
    "#     scrollbar.pack(side=\"right\", fill=\"y\")\n",
    "#     canvas['yscrollcommand'] = scrollbar.set\n",
    "    \n",
    "       \n",
    "    \n",
    "#     # Create a label for the title\n",
    "#     ttk.Label(add_recipe_window, text=\"Add New Recipe\")\n",
    "    \n",
    "#     #Create recipe name label and entry box\n",
    "#     recipe_name_label = ttk.Label(add_recipe_window, text=\"Recipe Name:\")\n",
    "#     recipe_name_input_box = tk.Entry(add_recipe_window,textvariable=recipe_name )\n",
    "    \n",
    "#     #Create number of servings label and entry box\n",
    "#     Number_of_servings_label = ttk.Label(add_recipe_window, text=\"Number of servings:\")\n",
    "#     Number_of_servings_input_box = tk.Entry(add_recipe_window)\n",
    "    \n",
    "    \n",
    "#     # labels and entry boxes\n",
    "#     Ingredient_label = ttk.Label(add_recipe_window, text=\"Ingredient:\")\n",
    "#     Ingredient_input_box = tk.Entry(add_recipe_window,textvariable=I )\n",
    "    \n",
    "#     Quantity_label = ttk.Label(add_recipe_window, text=\"Quantity:\")\n",
    "#     Quantity_input_box = tk.Entry(add_recipe_window)\n",
    "    \n",
    "#     Measurement_label = ttk.Label(add_recipe_window, text=\"Measurement:\")\n",
    "#     Measurement_input_box = tk.Entry(add_recipe_window, textvariable='measurement')\n",
    "\n",
    "#     # locations of labels and entry boxes\n",
    "#     canvas.create_window((50, 30), window=recipe_name_label)\n",
    "#     canvas.create_window((200, 30), window=recipe_name_input_box)\n",
    "#     canvas.create_window((69, 60), window=Number_of_servings_label)\n",
    "#     canvas.create_window((200, 60), window=Number_of_servings_input_box)    \n",
    "#     canvas.create_window((50, 100), window=Ingredient_label)\n",
    "#     canvas.create_window((150, 100), window=Ingredient_input_box)\n",
    "#     canvas.create_window((255, 100), window=Quantity_label)\n",
    "#     canvas.create_window((350, 100), window=Quantity_input_box)\n",
    "#     canvas.create_window((490, 100), window=Measurement_label)\n",
    "#     canvas.create_window((600, 100), window=Measurement_input_box)\n",
    "    \n",
    "    \n",
    "#     # Create a button to Add Recipe \n",
    "#     ttk.Button(add_recipe_window, text=\"Add Recipe\", command=lambda:[add_recipe_button_command(),\n",
    "#                                                                      add_recipe_window.destroy(),\n",
    "#                                                                     Main_Menu()]).place(x=650, y=750)\n",
    "    \n",
    "#     # Create a button to cancel\n",
    "#     ttk.Button(add_recipe_window, text=\"Cancel\", command=lambda:[add_recipe_window.destroy(),Main_Menu()]).place(x=50, y=750)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "#     # This function creates new widgets and adds them below the previous ones (this is so i can add multiple new ingredients)\n",
    "#     def add_ingredient_widgets(I,Q,M):\n",
    "#         #global added_ingredient_label\n",
    "#         global widget_y\n",
    "#         global ingredient_num\n",
    "\n",
    "#         widget_y += 30\n",
    "#         ingredient_num +=1\n",
    "\n",
    "#         ingredient_num_label = ttk.Label(add_recipe_window, text=f\"{ingredient_num}:\")\n",
    "        \n",
    "#         added_ingredient_label = ttk.Label(add_recipe_window, text=f\"Ingredient: {I}\\t  Quantity: {Q} \\t Measurement: {M}\")\n",
    "        \n",
    "#         # Create the windows inside the canvas and position them using widget_y\n",
    "#         canvas.create_window((160, widget_y), window=ingredient_num_label)\n",
    "#         canvas.create_window((160, widget_y), window=added_ingredient_label)\n",
    "                \n",
    "        \n",
    "\n",
    "#     add_ingredient_button = ttk.Button(add_recipe_window, text=\"Add Ingredient\", command=lambda:[add_ingredient_button_command()\n",
    "#                                                                                                  ,add_ingredient_widgets(I,Q,M)])\n",
    "\n",
    "#     # Create the button inside the canvas and position it\n",
    "#     canvas.create_window((725, 100), window=add_ingredient_button)\n",
    "    \n",
    "\n",
    "\n",
    "#     def add_ingredient_button_command():\n",
    "        \n",
    "#         # This will use .get() to take the information in the add igredient entry boxes and store it in a list\n",
    "#         global I\n",
    "#         global Q\n",
    "#         global M\n",
    "#         global ingredients\n",
    "        \n",
    "#         I = Ingredient_input_box.get()\n",
    "#         Q = Quantity_input_box.get()\n",
    "#         M = Measurement_input_box.get()\n",
    "        \n",
    "#         ingredients.append([I.lower(),Q.lower(),M.lower()])\n",
    "        \n",
    "#         # this deletes the contents of the entry boxes\n",
    "#         Ingredient_input_box.delete(0, tk.END)\n",
    "#         Quantity_input_box.delete(0, tk.END)\n",
    "#         Measurement_input_box.delete(0, tk.END)\n",
    "        \n",
    "#         return I,Q,M\n",
    "    \n",
    "#     def add_recipe_button_command():\n",
    "#         global recipe_name\n",
    "#         global servings\n",
    "        \n",
    "#         recipe_name = recipe_name_input_box.get()\n",
    "#         servings = Number_of_servings_input_box.get()\n",
    "        \n",
    "#         m = recipe(recipe_name,servings,ingredients) \n",
    "#         m.add_recipe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "e433d0cd",
   "metadata": {},
   "outputs": [],
   "source": [
    "def create_ingredient_dict():\n",
    "    #Creates a dictionary containing Key = Ingredient-ID and Value = Ingredient-Names from the Ingredients table\n",
    "    # This can then be used to determine if an ingredient is already recorded in the database and whats its Ingredient-ID is\n",
    "    \n",
    "    ingredient_dict = {}\n",
    "\n",
    "    for i in cursor.execute(f\"SELECT Ingredients.[Ingredient-ID],Ingredients.[Ingredient-Names]\\\n",
    "    FROM Ingredients;\"):\n",
    "        ingredient_dict[f\"{i[0]}\"] = f\"{i[1]}\"\n",
    "    \n",
    "    return ingredient_dict\n",
    "    \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "74d26233",
   "metadata": {},
   "outputs": [],
   "source": [
    "def create_new_ingredient_ids(new_recipe):\n",
    "    #Create a list of Ingredient-IDs for the new recipe and returns them >>> This will then be added to the Recipe-Ingredient table\n",
    "    #if the ingredient is in the Ingredients table get the Ingredient-ID \n",
    "    #if the ingredient is not in the Ingredients table insert into Ingredients table, then get the Ingredient-ID\n",
    "    new_recipe_ing_ids = []\n",
    "    ingredient_dict = create_ingredient_dict()\n",
    "    for i in new_recipe.ingredients:\n",
    "        if i[0] in ingredient_dict.values():\n",
    "\n",
    "            for ingid,ing in ingredient_dict.items():\n",
    "\n",
    "                if ing == i[0]:\n",
    "\n",
    "\n",
    "                    new_recipe_ing_ids.append(ingid)\n",
    "\n",
    "        else:\n",
    "            cursor.execute(f\"INSERT INTO Ingredients ([Ingredient-Names],[Measurement])\\\n",
    "            VALUES ('{i[0]}','{i[2]}');\")\n",
    "\n",
    "            conn.commit()\n",
    "\n",
    "            ingid = cursor.execute(f\"SELECT [Ingredient-ID]\\\n",
    "                                    FROM Ingredients\\\n",
    "                                    WHERE [Ingredient-Names]='{i[0]}';\")\n",
    "            ingred_id=ingid.fetchall()[0][0]\n",
    "            new_recipe_ing_ids.append(ingred_id)\n",
    "    return new_recipe_ing_ids"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "146acc22",
   "metadata": {},
   "outputs": [],
   "source": [
    "def insert_recipe(new_recipe):\n",
    "    # Inserts a new recipe into the Access database and returns the new recipe-ID\n",
    "    # First create a list of recipe names called nameslist\n",
    "    # Then checks for duplicates, if a duplicate add \"_1\" to the recipe name and check again\n",
    "    # Once the recipe name is unique, inset into Recipe-Names and return the new recipe-ID\n",
    "    recipe_id =[]\n",
    "    nameslist = []\n",
    "    for i in cursor.execute(f\"SELECT [Recipe-Names]\\\n",
    "                FROM Recipes;\"):\n",
    "        nameslist.append(i[0])\n",
    "    \n",
    "    \n",
    "    new_recipe_name = check_for_duplicates(new_recipe.name,1,nameslist)\n",
    "    \n",
    "    cursor.execute(f\"INSERT INTO Recipes ([Recipe-Names])\\\n",
    "            VALUES ('{new_recipe_name}');\")\n",
    "    conn.commit()\n",
    "    \n",
    "       \n",
    "    \n",
    "    cursor.execute(f\"SELECT [Recipe-ID]\\\n",
    "                                FROM Recipes\\\n",
    "                                WHERE [Recipe-Names]='{new_recipe_name}';\")\n",
    "     \n",
    "    recipe_id = cursor.fetchall()\n",
    "    \n",
    "    \n",
    "    return recipe_id\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "d6db40db",
   "metadata": {},
   "outputs": [],
   "source": [
    "def check_for_duplicates(new_recipe_name, i, nameslist):\n",
    "    i=1\n",
    "    name_len= len(new_recipe_name)\n",
    "    #Takes the recipe name\n",
    "    while True:\n",
    "        i+=1\n",
    "        if new_recipe_name in nameslist:\n",
    "            if i>1:\n",
    "                new_recipe_name = new_recipe_name[0:name_len] + f\"_{i}\"\n",
    "        else:\n",
    "            return new_recipe_name\n",
    "            break\n",
    "        \n",
    "            "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "28f2ed17",
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_ingredients(selected_recipes):\n",
    "    # creates a ings_id_list of tuples containing (ingredient-ID,Quantity) \n",
    "    # then creates a quant_list of tuples containing (ingredient-ID,SUM(Quantity)) \n",
    "    # then creates an ingredient_names_list from the ingredient-IDs in set(quant_list)\n",
    "    # the combines quant_list and ingredient_names_list to create I_Q_list\n",
    "    \n",
    "    ings_id_list = []\n",
    "    for i in range(len(selected_recipes)):\n",
    "\n",
    "        for k in cursor.execute(f\"SELECT [Ingredient-ID],[Quantity] FROM [Recipe-Ingredient] WHERE [Recipe-ID]={selected_recipes[i][1]};\"):\n",
    "            ings_id_list.append((k[0],k[1]))\n",
    "\n",
    "\n",
    "    quant_list = []\n",
    "    for i in ings_id_list:\n",
    "        cursor.execute(f\"SELECT SUM([Quantity]) FROM [Recipe-Ingredient] WHERE [Ingredient-ID]={i[0]};\")\n",
    "        quant_list.append((i[0],int(cursor.fetchall()[0][0])))\n",
    "        \n",
    "    a = list(set(quant_list))\n",
    "    ingredient_names_list = []\n",
    "    for i in range(len(a)):\n",
    "        for k in cursor.execute(f\"SELECT [Ingredient-ID],[Ingredient-Names],[Measurement] FROM [Ingredients] WHERE [Ingredient-ID]={int(a[i][0])};\"):\n",
    "                    ingredient_names_list.append(k)\n",
    "    ingredient_names_list\n",
    "    \n",
    "    I_Q_list = []\n",
    "    for i in range(len(a)):\n",
    "        I_Q_list.append((ingredient_names_list[i][1],a[i][1],ingredient_names_list[i][2]))\n",
    "        \n",
    "    return I_Q_list\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "24ed8c3f",
   "metadata": {},
   "outputs": [],
   "source": [
    "def recipe_list():\n",
    "    recipes = []\n",
    "    \n",
    "    \n",
    "    for i in cursor.execute(f\"SELECT [Recipes].[Recipe-Names], [Recipes].[Recipe-ID]\\\n",
    "    FROM [Recipes];\"):\n",
    "        recipes.append(i)\n",
    "    return recipes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "382ecfb3",
   "metadata": {},
   "outputs": [],
   "source": [
    "def delete_recipes(selected_recipes):\n",
    "    \n",
    "    #this deletes the rows using the recipe-IDs in selected_recipes in the recipes list\n",
    "    #open the workbook and delete the rows from selected_recipes.\n",
    "    \n",
    "    \n",
    "    \n",
    "    for i in selected_recipes:\n",
    "        \n",
    "       \n",
    "        cursor.execute(f\"DELETE FROM [Recipes] WHERE [Recipes].[Recipe-ID]={int(i[1])};\")\n",
    "        cursor.execute(f\"DELETE FROM [Recipe-Ingredient] WHERE [Recipe-Ingredient].[Recipe-ID]={int(i[1])};\")\n",
    "        conn.commit()    \n",
    "    \n",
    "\n",
    "\n",
    "def delete_recipes_button(menu_window):\n",
    "    \n",
    "    global selected_recipes\n",
    "    selected_recipes = []\n",
    "    \n",
    "    # Close the menu window\n",
    "    menu_window.destroy()\n",
    "    \n",
    "    # Create Select recipes window\n",
    "    delete_recipes_window = tk.Tk()\n",
    "    \n",
    "    # Create a list of recipes\n",
    "    # Open the excel document (open_Recipes_xl()) <- this is in the recipe_list() function. and create a recipe list using\n",
    "    # recipe_list()\n",
    "    recipes=[]\n",
    "    recipes = recipe_list()\n",
    "    \n",
    "    # Create a list of tkinter variables for the checkboxes\n",
    "    checkboxes = []\n",
    "    for recipe in recipes:\n",
    "        var = tk.IntVar()\n",
    "        checkboxes.append(var)\n",
    "    \n",
    "    # Create the checkboxes and \"Submit\" button\n",
    "    for i, recipe in enumerate(recipes):\n",
    "        tk.Checkbutton(delete_recipes_window, text=recipe[0], variable=checkboxes[i]).pack()\n",
    "\n",
    "    # Create a \"Submit\" button\n",
    "    submit_button = tk.Button(delete_recipes_window, text='Submit', command=lambda:[submit(recipes,checkboxes),delete_recipes(selected_recipes),delete_recipes_window.destroy(),Main_Menu()])\n",
    "    submit_button.pack()\n",
    "\n",
    "    \n",
    "    # Run the main loop\n",
    "    delete_recipes_window.mainloop()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "3ba1b85f",
   "metadata": {},
   "outputs": [],
   "source": [
    "def submit(recipes,checkboxes):\n",
    "    # A function to be called when the \"Submit\" button is clicked\n",
    "    # Create a new list to store the selected recipes\n",
    "    \n",
    "    \n",
    "    selected = []\n",
    "    for i, recipe in enumerate(recipes):\n",
    "        \n",
    "                \n",
    "        if checkboxes[i].get() == 1:\n",
    "            selected.append(recipe)\n",
    "    \n",
    "        # Assign the selected recipes to the global variable\n",
    "    global selected_recipes\n",
    "    selected_recipes = selected\n",
    "    return selected_recipes\n",
    "\n",
    "def Create_Shopping_List(menu_window):\n",
    "    #Called when the \"Create shopping list\" button is clicked from the main menu\n",
    "    \n",
    "    # Close the menu window\n",
    "    menu_window.destroy()\n",
    "    \n",
    "    # Create Select recipes window\n",
    "    select_recipes_window = tk.Tk()\n",
    "    \n",
    "    # Create a list of recipes\n",
    "    # Open the excel document (open_Recipes_xl()) <- this is in the recipe_list() function. and create a recipe list using\n",
    "    # recipe_list()\n",
    "    \n",
    "    recipes = recipe_list()\n",
    "    \n",
    "    # Create a list of tkinter variables for the checkboxes\n",
    "    checkboxes = []\n",
    "    for recipe in recipes:\n",
    "        var = tk.IntVar()\n",
    "        checkboxes.append(var)\n",
    "    \n",
    "    # Create the checkboxes and \"Submit\" button\n",
    "    for i, recipe in enumerate(recipes):\n",
    "        tk.Checkbutton(select_recipes_window, text=recipe[0], variable=checkboxes[i]).pack()\n",
    "\n",
    "    # Create a \"Submit\" button\n",
    "    submit_button = tk.Button(select_recipes_window, text='Submit', command=lambda:[submit(recipes,checkboxes),select_recipes_window.destroy(),Main_Menu()])\n",
    "    submit_button.pack()\n",
    "\n",
    "\n",
    "    # Run the main loop\n",
    "    select_recipes_window.mainloop()\n",
    "    \n",
    "    # trying to string all the functions together to create a shopping list\n",
    "    # selected_recipes >> A - get_ingredients() >> B - join_ingredients >> C - merge_duplicates >> D - write_shopping_list\n",
    "    \n",
    "    A = get_ingredients(selected_recipes)\n",
    "#     B = join_ingredients(A)\n",
    "#     C = merge_duplicates(B)\n",
    "    write_shopping_list(A)\n",
    "    return selected_recipes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "cdc31223",
   "metadata": {},
   "outputs": [],
   "source": [
    "def write_shopping_list(ingredient_list):\n",
    "    os.chdir(file_path)\n",
    "    now = datetime.datetime.now()\n",
    "    date_string = now.strftime('%d-%m-%Y')\n",
    "    date_string\n",
    "    # Open the file in write mode\n",
    "    with open(f'Shopping list - {date_string}.txt', 'w') as f:\n",
    "        # Write each item to the file as a line\n",
    "        for i,q,m in ingredient_list:\n",
    "            f.writelines(i + ' ' + str(q) + ' ' + m + '\\n')\n",
    "\n",
    "    # The file is automatically closed when the block ends"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "b047ca9f",
   "metadata": {},
   "outputs": [],
   "source": [
    "import tkinter as tk\n",
    "from tkinter import ttk\n",
    "def add_recipe(menu_window):\n",
    "    #Called when the \"Add recipe\" button is clicked from the main menu\n",
    "    \n",
    "    \n",
    "    global recipe_name\n",
    "    recipe_name = ''\n",
    "    global servings\n",
    "    servings = ''\n",
    "    global ingredients\n",
    "    ingredients = []\n",
    "    global ingredient_num\n",
    "    ingredient_num = 0\n",
    "    \n",
    "    global I\n",
    "    global Q\n",
    "    global M\n",
    "    I = ''\n",
    "    Q = ''\n",
    "    M = ''\n",
    "    \n",
    "    # Initialize the widget_y variable with the y position of the first set of widgets\n",
    "    global widget_y\n",
    "    widget_y = 100\n",
    "    \n",
    "    # Close the menu window\n",
    "    menu_window.destroy()\n",
    "    \n",
    "    # Create add recipe window\n",
    "    add_recipe_window = tk.Tk()\n",
    "    \n",
    "     # Create the frame to hold the canvas and the scrollbar\n",
    "    frame = tk.Frame(add_recipe_window)\n",
    "    frame.pack()\n",
    "\n",
    "    \n",
    "    # Create the canvas widget and the scrollbar\n",
    "    canvas = tk.Canvas(add_recipe_window, height = 800, width = 770 )\n",
    "    canvas.pack(side = \"left\")\n",
    "    scrollbar = ttk.Scrollbar(add_recipe_window, orient=\"vertical\", command=canvas.yview)\n",
    "    scrollbar.pack(side=\"right\", fill=\"y\")\n",
    "    canvas['yscrollcommand'] = scrollbar.set\n",
    "    \n",
    "       \n",
    "    \n",
    "    # Create a label for the title\n",
    "    ttk.Label(add_recipe_window, text=\"Add New Recipe\")\n",
    "    \n",
    "    #Create recipe name label and entry box\n",
    "    recipe_name_label = ttk.Label(add_recipe_window, text=\"Recipe Name:\")\n",
    "    recipe_name_input_box = tk.Entry(add_recipe_window,textvariable=recipe_name )\n",
    "    \n",
    "    #Create number of servings label and entry box\n",
    "    Number_of_servings_label = ttk.Label(add_recipe_window, text=\"Number of servings:\")\n",
    "    Number_of_servings_input_box = tk.Entry(add_recipe_window)\n",
    "    \n",
    "    \n",
    "    # labels and entry boxes\n",
    "    Ingredient_label = ttk.Label(add_recipe_window, text=\"Ingredient:\")\n",
    "    Ingredient_input_box = tk.Entry(add_recipe_window,textvariable=I )\n",
    "    \n",
    "    Quantity_label = ttk.Label(add_recipe_window, text=\"Quantity:\")\n",
    "    Quantity_input_box = tk.Entry(add_recipe_window)\n",
    "    \n",
    "    Measurement_label = ttk.Label(add_recipe_window, text=\"Measurement:\")\n",
    "    Measurement_input_box = tk.Entry(add_recipe_window, textvariable='measurement')\n",
    "\n",
    "    # locations of labels and entry boxes\n",
    "    canvas.create_window((50, 30), window=recipe_name_label)\n",
    "    canvas.create_window((200, 30), window=recipe_name_input_box)\n",
    "    canvas.create_window((69, 60), window=Number_of_servings_label)\n",
    "    canvas.create_window((200, 60), window=Number_of_servings_input_box)    \n",
    "    canvas.create_window((50, 100), window=Ingredient_label)\n",
    "    canvas.create_window((150, 100), window=Ingredient_input_box)\n",
    "    canvas.create_window((255, 100), window=Quantity_label)\n",
    "    canvas.create_window((350, 100), window=Quantity_input_box)\n",
    "    canvas.create_window((490, 100), window=Measurement_label)\n",
    "    canvas.create_window((600, 100), window=Measurement_input_box)\n",
    "    \n",
    "    \n",
    "    # Create a button to Add Recipe\n",
    "    \n",
    "    \n",
    "    ttk.Button(add_recipe_window, text=\"Add Recipe\", command=lambda:[add_recipe_button_command(ingredients),\n",
    "                                                                     add_recipe_window.destroy(),\n",
    "                                                                     Main_Menu()]).place(x=650, y=750)\n",
    "    \n",
    "    # Create a button to cancel\n",
    "    ttk.Button(add_recipe_window, text=\"Cancel\", command=lambda:[add_recipe_window.destroy(),Main_Menu()]).place(x=50, y=750)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "    # This function creates new widgets and adds them below the previous ones (this is so i can add multiple new ingredients)\n",
    "    def add_ingredient_widgets(I,Q,M):\n",
    "        #global added_ingredient_label\n",
    "        global widget_y\n",
    "        global ingredient_num\n",
    "\n",
    "        widget_y += 30\n",
    "        ingredient_num +=1\n",
    "\n",
    "        ingredient_num_label = ttk.Label(add_recipe_window, text=f\"{ingredient_num}:\")\n",
    "        \n",
    "        added_ingredient_label = ttk.Label(add_recipe_window, text=f\"Ingredient: {I}\\t  Quantity: {Q} \\t Measurement: {M}\")\n",
    "        \n",
    "        # Create the windows inside the canvas and position them using widget_y\n",
    "        canvas.create_window((160, widget_y), window=ingredient_num_label)\n",
    "        canvas.create_window((160, widget_y), window=added_ingredient_label)\n",
    "                \n",
    "        \n",
    "\n",
    "    add_ingredient_button = ttk.Button(add_recipe_window, text=\"Add Ingredient\", command=lambda:[add_ingredient_button_command()\n",
    "                                                                                                 ,add_ingredient_widgets(I,Q,M)])\n",
    "\n",
    "    # Create the button inside the canvas and position it\n",
    "    canvas.create_window((725, 100), window=add_ingredient_button)\n",
    "    \n",
    "\n",
    "\n",
    "    def add_ingredient_button_command():\n",
    "        \n",
    "        # This will use .get() to take the information in the add igredient entry boxes and store it in a list\n",
    "        global I\n",
    "        global Q\n",
    "        global M\n",
    "        global ingredients\n",
    "        \n",
    "        I = Ingredient_input_box.get()\n",
    "        Q = Quantity_input_box.get()\n",
    "        M = Measurement_input_box.get()\n",
    "        \n",
    "        ingredients.append([I.lower(),Q.lower(),M.lower()])\n",
    "        \n",
    "        # this deletes the contents of the entry boxes\n",
    "        Ingredient_input_box.delete(0, tk.END)\n",
    "        Quantity_input_box.delete(0, tk.END)\n",
    "        Measurement_input_box.delete(0, tk.END)\n",
    "        \n",
    "        return I,Q,M\n",
    "    \n",
    "    def add_recipe_button_command(ingredients):\n",
    "        global recipe_name\n",
    "        global servings\n",
    "        \n",
    "        recipe_name = recipe_name_input_box.get()\n",
    "        servings = Number_of_servings_input_box.get()\n",
    "        \n",
    "        print(servings)\n",
    "       \n",
    "        new_recipe = recipe(recipe_name,servings,ingredients)\n",
    "        \n",
    "        # This create/collects the recipe-id and ingredient-ids then adds them to the correct table\n",
    "        # insert_recipe() - creates a recipe-id (recipe name is updated if there are duplicates)\n",
    "        # create_new_ingredient_ids() - creates a list ingredient-ids (new ids for new ingredients)\n",
    "\n",
    "        new_recipe_id = insert_recipe(new_recipe)\n",
    "        new_ingredient_ids = create_new_ingredient_ids(new_recipe)\n",
    "\n",
    "        for ing_id in new_ingredient_ids:\n",
    "            cursor.execute(f\"INSERT INTO [Recipe-Ingredient] ([Recipe-ID],[Ingredient-ID],[Quantity])\\\n",
    "                    VALUES ('{int(new_recipe_id[0][0])}','{int(ing_id)}','{new_recipe.ingredients[new_ingredient_ids.index(ing_id)][1]}');\")\n",
    "            conn.commit()\n",
    "        return new_recipe\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "af007a19",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4\n"
     ]
    }
   ],
   "source": [
    "Main_Menu()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "92896fdb",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.15"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
